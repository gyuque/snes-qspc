#------------------------------------------------------------------------------
#		メモリマップ
#------------------------------------------------------------------------------
MEMORY {
	ROMST:		start = $008000, size = $7fc0, type = ro, file = %O, fill = yes, define = yes; # program
	ROMINFO:	start = $00ffc0, size = $0040, type = ro, file = %O, fill = yes, define = yes; # header
	ZP:		    start = $000000, size = $0020, type = rw, define = yes;
	RAM:		start = $7e2000, size = $e000, type = rw, define = yes;
	STACK:		start = $000000, size = $2000, type = rw, define = yes;
	SRAM:		start = $006000, size = $2000, type = rw, define = yes;
	ROM1:		start = $818000, size = $8000, fill = yes; # <- added
	ROM2:		start = $828000, size = $8000, fill = yes; # <- added
	ROM3:		start = $838000, size = $8000, fill = yes; # <- added, smeta
	ROM4:		start = $848000, size = $8000, fill = yes; # <- added, snd0
	ROM5:		start = $858000, size = $8000, fill = yes; # <- added
	ROM6:		start = $868000, size = $8000, fill = yes; # <- added, snd1
	ROM7:		start = $878000, size = $8000, fill = yes; # <- added
	ROM8:		start = $888000, size = $8000, fill = yes; # <- added, snd2
	ROM9:		start = $898000, size = $8000, fill = yes; # <- added
	ROMA:		start = $8A8000, size = $8000, fill = yes; # <- added, snd3
	ROMB:		start = $8B8000, size = $8000, fill = yes; # <- added
	ROMPAD:		start = $8C8000, size =$20000, fill = yes; # <- added
}
#------------------------------------------------------------------------------
#		セグメントマップ
#------------------------------------------------------------------------------
SEGMENTS {
	STARTUP:	load = ROMST,		type = ro,	define = yes;
	CARTINFO:	load = ROMINFO,		type = ro,	define = yes;
	RODATA:		load = ROMST,		type = ro,	define = yes;
	DATA:		load = ROMST, run = RAM,type = rw,	define = yes;
	BSS:		load = RAM,		type = bss,	define = yes;
	ZEROPAGE:	load = ZP,		type = zp;
	CODE:		load = ROMST,		type = ro,	define = yes;
	VISASSET1:	load = ROM1, type = ro, define = yes;
	VISASSET2:	load = ROM2, type = ro, define = yes;
	MISCASSET:	load = ROM3, type = ro, define = yes;
	SDRVROM1:	load = ROM4, type = ro, define = yes;
	SDRVROM2:	load = ROM5, type = ro, define = yes;
	SDRVROM3:	load = ROM6, type = ro, define = yes;
	SDRVROM4:	load = ROM7, type = ro, define = yes;
	SDRVROM5:	load = ROM8, type = ro, define = yes;
	SDRVROM6:	load = ROM9, type = ro, define = yes;
	SDRVROM7:	load = ROMA, type = ro, define = yes;
	SDRVROM8:	load = ROMB, type = ro, define = yes;
	DONTUSE:	load = ROMPAD, type = ro, define = yes;
}
#------------------------------------------------------------------------------
#		
#------------------------------------------------------------------------------
FEATURES {
	CONDES: segment = RODATA,
		type = constructor,
		label = __CONSTRUCTOR_TABLE__,
		count = __CONSTRUCTOR_COUNT__;
	CONDES: segment = RODATA,
		type = destructor,
		label = __DESTRUCTOR_TABLE__,
		count = __DESTRUCTOR_COUNT__;
}
#------------------------------------------------------------------------------
#		
#------------------------------------------------------------------------------
SYMBOLS {
	__STACKSIZE__ = $0200;
}
